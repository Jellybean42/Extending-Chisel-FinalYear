(* Copyright (C) 2017
                 Free Software Foundation, Inc.  *)
(* This file is part of Chisel.

Chisel is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

Chisel is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *)

DEFINITION MODULE nameKey ;

(*
    Title      : nameKey
    Author     : Gaius Mulley
    System     : Chisel
    Date       : Wed Nov 25 17:55:32 2015
    Revision   : $Version$
    Description: nameKey provides a dynamic binary tree name to key
                 interface.
*)

FROM SYSTEM IMPORT ADDRESS ;


CONST
   NulName = 0 ;  (* No legal name.                      *)
                  (* NulName is not present in the Tree  *)

TYPE
   Name = CARDINAL ;


(*
   makeKey - returns the Key of the symbol, a. If a is not in the
             name table then it is added, otherwise the Key of a is returned
             directly. Note that the name table has no scope - it merely
             presents a more convienient way of expressing strings. By a Key.
             These keys last for the duration of compilation.
*)

PROCEDURE makeKey (a: ARRAY OF CHAR) : Name ;


(*
   makekey - returns the Key of the symbol, a. If a is not in the
             name table then it is added, otherwise the Key of a is returned
             directly. Note that the name table has no scope - it merely
             presents a more convienient way of expressing strings. By a Key.
             These keys last for the duration of compilation.
*)

PROCEDURE makekey (a: ADDRESS) : Name ;


(*
   getKey - returns the name, a, of the key, key.
*)

PROCEDURE getKey (key: Name; VAR a: ARRAY OF CHAR) ;


(*
   lengthKey - returns the length of a Key.
*)

PROCEDURE lengthKey (key: Name) : CARDINAL ;


(*
   isKey - returns TRUE if string, a, is currently a key.
*)

PROCEDURE isKey (a: ARRAY OF CHAR) : BOOLEAN ;


(*
   writeKey - Display the symbol represented by Key.
*)

PROCEDURE writeKey (key: Name) ;


(*
   isSameExcludingCase - returns TRUE if key1 and key2 are
                         the same. It is case insensitive.
*)

PROCEDURE isSameExcludingCase (key1, key2: Name) : BOOLEAN ;


(*
   keyToCharStar - returns the C char * string equivalent for, key.
*)

PROCEDURE keyToCharStar (key: Name) : ADDRESS ;


END nameKey.
