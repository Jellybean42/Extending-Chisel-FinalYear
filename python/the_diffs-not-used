@@ -177,14 +181,56 @@ def toLine (l):
     return [[int (l[0][0]), int (l[0][1])], [int (l[1][0]), int (l[1][1])]]


+#
+#  vecZ - in:  a pen value n, f.
+#         out:  a vector [0, 0, n/f in doom3 units]
+#
+
+def vecZ (n, f = 0):
+    return [0, 0, toInches (n, f)]
+
+
+#
+#  vecInches - in:  a vector in pen units
+#              out: returns a vector in doom3 units
+#

 def vecInches (vec):
+    #
+    # flip x coordinates - so that the result map matches the pen
+    #                      drawing generated by txt2pen.
+    #
     result = []
-    for p in vec:
-        result += [toInches (p)]
+    for i, p in enumerate (vec):
+        if i == 0 and flipAxis == 0:
+            result += [toInches ((maxx + 1) - p)]
+        elif i == 1 and flipAxis == 1:
+            result += [toInches ((maxy + 1) - p)]
+        else:
+            result += [toInches (p)]
     return result


+#
+#  vecInches2 - in:  a vector in pen units
+#               out: returns a vector in doom3 units
+#
+
+def vecInches2 (vec):
+    #
+    # flip x coordinates - so that the result map matches the pen
+    #                      drawing generated by txt2pen.
+    #
+    result = []
+    for i, p in enumerate (vec):
+        if i == 0 and flipAxis == 0:
+            result += [toInches ((maxx + 1) - p[0], p[1])]
+        elif i == 1 and flipAxis == 1:
+            result += [toInches ((maxy + 1) - p[0], p[1])]
+        else:
+            result += [toInches (p[0], p[1])]
+    return result
+

@@ -1749,6 +1810,12 @@ def generateBrushes (r, e, o, bcount):
     return o, bcount


+#
+#                [toInches (e[0][0]+1), toInches (e[0][1]+1), toInches (getFloorLevel (r), -wallThickness)],
+#                [toInches (e[1][0]), toInches (e[1][1]), toInches (getFloorLevel (r))],
+#
+
+
 def generateFloor (r, e, o, bcount):
     if debugging:
         print "floor in room", r, e
@@ -1759,15 +1826,22 @@ def generateFloor (r, e, o, bcount):
     o.write ('    {\n')
     o.write ('         brushDef3\n')
     o.write ('         {\n')
+    zs = vecZ (getFloorLevel (r), -wallThickness)
+    vs = [e[0][0]+1, e[0][1]+1, 0]
+    ve = [e[1][0], e[1][1], getFloorLevel (r)]
     o = fBrick (o,
-                [toInches (e[0][0]+1), toInches (e[0][1]+1), toInches (getFloorLevel (r), -wallThickness)],
-                [toInches (e[1][0]), toInches (e[1][1]), toInches (getFloorLevel (r))],
+                addVec (vecInches (vs), zs), vecInches (ve),
                 defaults['floor'],
                 defaults['floor_transform'])
     o.write ('         }\n')
     o.write ('    }\n')
     return o, bcount + 1

+#
+#                 [toInches (e[0][0]+1), toInches (e[0][1]+1), toInches (minCeilingHeight)],
+#                 [toInches (e[1][0]), toInches (e[1][1]), toInches (minCeilingHeight, wallThickness)],
+#
+

 def generateCeiling (r, e, o, bcount):
     o.write ('    // primitive ' + str (bcount) + '\n')
@@ -1775,9 +1849,11 @@ def generateCeiling (r, e, o, bcount):
     o.write ('    {\n')
     o.write ('         brushDef3\n')
     o.write ('         {\n')
+    vs = [e[0][0]+1, e[0][1]+1, minCeilingHeight]
+    ze = vecZ (minCeilingHeight, wallThickness)
+    ve = [e[1][0], e[1][1], 0]
     o = fBrick (o,
-                [toInches (e[0][0]+1), toInches (e[0][1]+1), toInches (minCeilingHeight)],
-                [toInches (e[1][0]), toInches (e[1][1]), toInches (minCeilingHeight, wallThickness)],
+                vecInches (vs), addVec (vecInches (ve), ze),
                 defaults['ceiling'],
                 defaults['ceiling_transform'])
     o.write ('         }\n')
@@ -1825,7 +1901,7 @@ def generateEntities (o):
     o.write ('    "classname" "worldspawn"\n')
     o.write ('    "spawnflags" "1"\n')
     o.write ('    "penmap" "' + inputFile + '"\n')
-    for r in rooms.keys():
+    for r in rooms.keys ():
         el = roomToEntities (r)
         if debugging:
             print "Room", r
@@ -1842,13 +1918,24 @@ def generateEntities (o):
     return o, 1, bcount


+#
+#  writePos -
+#
+
 def writePos (o, p):
-    o.write (str (-toInches (int (p[1]))) + " " + str (-toInches (int (p[0]))))
+    v = vecInches ([int (p[0]), int (p[1])])
+    o.write (str (-v[1]) + " " + str (-v[0]))
     return o


+#
+#  writeMidPos -
+#
+
 def writeMidPos (o, p):
-    o.write (str (-toInches (int (p[1]), -halfUnit)) + " " + str (-toInches (int (p[0]), -halfUnit)))
+    v = vecInches2 ([[int (p[0]), -halfUnit],
+                     [int (p[1]), -halfUnit]])
+    o.write (str (-v[1]) + " " + str (-v[0]))
     return o


@@ -1954,16 +2041,18 @@ def generateLightPillar (r, o, l, el):
             p0 = addVec ([float (l[0]), float (l[1])], pillarOffset[w[-1]])
             p1 = addVec (p0, [lightBlock, lightBlock])
             # print "light is touching a wall", l
+            v0 = [p0[0], p0[1], getFloorLevel (r)]
+            v1 = [p1[0], p1[1], lightBlockHeight]
             o = vBrick (o,
-                        [toInches (p0[0]), toInches (p0[1]), toInches (getFloorLevel (r))],
-                        [toInches (p1[0]), toInches (p1[1]), toInches (lightBlockHeight)],
+                        vecInches (v0), vecInches (v1),
                         defaults[light_stand_material],
                         defaults[light_stand_material + '_transform'])
             return o
     # print "light is not touching a wall", l
+    v0 = [int (l[0]), int (l[1]), getFloorLevel (r)]
+    v1 = [int (l[0])+lightBlock, int (l[1])+lightBlock, lightBlockHeight]
     o = vBrick (o,
-                [toInches (int (l[0])), toInches (int (l[1])), toInches (getFloorLevel (r))],
-                [toInches (int (l[0])+lightBlock), toInches (int (l[1])+lightBlock), toInches (lightBlockHeight)],
+                vecInches (v0), vecInches (v1),
                 defaults[light_stand_material],
                 defaults[light_stand_material + '_transform'])
     return o
